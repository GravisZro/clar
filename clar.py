#!/usr/bin/env python

from __future__ import with_statement
from string import Template
import re, fnmatch, os

VERSION = "0.10.0"

TEST_FUNC_REGEX = r"^(void\s+(test_%s__(\w+))\(\s*void\s*\))\s*\{"

EVENT_CB_REGEX = re.compile(
    r"^(void\s+clar_on_(\w+)\(\s*void\s*\))\s*\{",
    re.MULTILINE)

SKIP_COMMENTS_REGEX = re.compile(
    r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
    re.DOTALL | re.MULTILINE)

CLAR_HEADER = """
/*
 * Clar v%s
 *
 * This is an autogenerated file. Do not modify.
 * To add new unit tests or suites, regenerate the whole
 * file with `./clar`
 */
""" % VERSION

CLAR_EVENTS = [
    'init',
    'shutdown',
    'test',
    'suite'
]

def main():
    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-c', '--clar-path', dest='clar_path')
    parser.add_option('-v', '--report-to', dest='print_mode', default='default')

    options, args = parser.parse_args()

    for folder in args or ['.']:
        builder = ClarTestBuilder(folder,
            clar_path = options.clar_path,
            print_mode = options.print_mode)

        builder.render()


class ClarTestBuilder:
    def __init__(self, path, clar_path = None, print_mode = 'default'):
        self.declarations = []
        self.suite_names = []
        self.callback_data = {}
        self.suite_data = {}
        self.event_callbacks = []

        self.clar_path = os.path.abspath(clar_path) if clar_path else None

        self.path = os.path.abspath(path)
        self.modules = [
            "clar_sandbox.c",
            "clar_fixtures.c",
            "clar_fs.c",
            "clar_categorize.c",
        ]

        self.modules.append("clar_print_%s.c" % print_mode)

        print("Loading test suites...")

        for root, dirs, files in os.walk(self.path):
            module_root = root[len(self.path):]
            module_root = [c for c in module_root.split(os.sep) if c]

            tests_in_module = fnmatch.filter(files, "*.c")

            for test_file in tests_in_module:
                full_path = os.path.join(root, test_file)
                test_name = "_".join(module_root + [test_file[:-2]])

                with open(full_path) as f:
                    self._process_test_file(test_name, f.read())

        if not self.suite_data:
            raise RuntimeError(
                'No tests found under "%s"' % path)

    def render(self):
        main_file = os.path.join(self.path, 'clar_main.c')
        with open(main_file, "w") as out:
            out.write(self._render_main())

        header_file = os.path.join(self.path, 'clar.h')
        with open(header_file, "w") as out:
            out.write(self._render_header())

        print ('Written Clar suite to "%s"' % self.path)

    #####################################################
    # Internal methods
    #####################################################

    def _render_cb(self, cb):
        return '{"%s", &%s}' % (cb['short_name'], cb['symbol'])

    def _render_suite(self, suite, index):
        template = Template(
r"""
    {
        ${suite_index},
        "${clean_name}",
        ${categorize},
        ${initialize},
        ${cleanup},
        ${cb_ptr}, ${cb_count}
    }
""")

        callbacks = {}
        for cb in ['categorize', 'initialize', 'cleanup']:
            callbacks[cb] = (self._render_cb(suite[cb])
                if suite[cb] else "{NULL, NULL}")

        return template.substitute(
            suite_index = index,
            clean_name = suite['name'].replace("_", "::"),
            categorize = callbacks['categorize'],
            initialize = callbacks['initialize'],
            cleanup = callbacks['cleanup'],
            cb_ptr = "_clar_cb_%s" % suite['name'],
            cb_count = suite['cb_count']
        ).strip()

    def _render_callbacks(self, suite_name, callbacks):
        template = Template(
r"""
static const struct clar_func _clar_cb_${suite_name}[] = {
    ${callbacks}
};
""")
        callbacks = [
            self._render_cb(cb)
            for cb in callbacks
            if cb['short_name'] not in ('categorize', 'initialize', 'cleanup')
        ]

        return template.substitute(
            suite_name = suite_name,
            callbacks = ",\n\t".join(callbacks)
        ).strip()

    def _render_event_overrides(self):
        overrides = []
        for event in CLAR_EVENTS:
            if event in self.event_callbacks:
                continue

            overrides.append(
                "#define clar_on_%s() /* nop */" % event
            )

        return '\n'.join(overrides)

    def _render_header(self):
        template = Template(self._load_file('clar.h'))

        declarations = "\n".join(
            "extern %s;" % decl
            for decl in sorted(self.declarations)
        )

        return template.substitute(
            extern_declarations = declarations,
        )

    def _render_main(self):
        template = Template(self._load_file('clar.c'))
        suite_names = sorted(self.suite_names)

        suite_data = [
            self._render_suite(self.suite_data[s], i)
            for i, s in enumerate(suite_names)
        ]

        callbacks = [
            self._render_callbacks(s, self.callback_data[s])
            for s in suite_names
        ]

        callback_count = sum(
            len(cbs) for cbs in self.callback_data.values()
        )

        return template.substitute(
            clar_modules = self._get_modules(),
            clar_callbacks = "\n".join(callbacks),
            clar_suites = ",\n\t".join(suite_data),
            clar_suite_count = len(suite_data),
            clar_callback_count = callback_count,
            clar_event_overrides = self._render_event_overrides(),
        )

    def _load_file(self, filename):
        if self.clar_path:
            filename = os.path.join(self.clar_path, filename)
            with open(filename) as cfile:
                return cfile.read()

        else:
            import zlib, base64, sys
            content = CLAR_FILES[filename]

            if sys.version_info >= (3, 0):
                content = bytearray(content, 'utf_8')
                content = base64.b64decode(content)
                content = zlib.decompress(content)
                return str(content, 'utf-8')
            else:
                content = base64.b64decode(content)
                return zlib.decompress(content)

    def _get_modules(self):
        return "\n".join(self._load_file(f) for f in self.modules)

    def _skip_comments(self, text):
        def _replacer(match):
            s = match.group(0)
            return "" if s.startswith('/') else s

        return re.sub(SKIP_COMMENTS_REGEX, _replacer, text)

    def _process_test_file(self, suite_name, contents):
        contents = self._skip_comments(contents)

        self._process_events(contents)
        self._process_declarations(suite_name, contents)

    def _process_events(self, contents):
        for (decl, event) in EVENT_CB_REGEX.findall(contents):
            if event not in CLAR_EVENTS:
                continue

            self.declarations.append(decl)
            self.event_callbacks.append(event)

    def _process_declarations(self, suite_name, contents):
        callbacks = []
        categorize = initialize = cleanup = None

        regex_string = TEST_FUNC_REGEX % suite_name
        regex = re.compile(regex_string, re.MULTILINE)

        for (declaration, symbol, short_name) in regex.findall(contents):
            data = {
                "short_name" : short_name,
                "declaration" : declaration,
                "symbol" : symbol
            }

            if short_name == 'categorize':
                categorize = data
            if short_name == 'initialize':
                initialize = data
            elif short_name == 'cleanup':
                cleanup = data
            else:
                callbacks.append(data)

        if not callbacks:
            return

        tests_in_suite = len(callbacks)

        suite = {
            "name" : suite_name,
            "categorize" : categorize,
            "initialize" : initialize,
            "cleanup" : cleanup,
            "cb_count" : tests_in_suite
        }

        if categorize:
            self.declarations.append(categorize['declaration'])

        if initialize:
            self.declarations.append(initialize['declaration'])

        if cleanup:
            self.declarations.append(cleanup['declaration'])

        self.declarations += [
            callback['declaration']
            for callback in callbacks
        ]

        callbacks.sort(key=lambda x: x['short_name'])
        self.callback_data[suite_name] = callbacks
        self.suite_data[suite_name] = suite
        self.suite_names.append(suite_name)

        print("  %s (%d tests)" % (suite_name, tests_in_suite))



CLAR_FILES = {
"clar.c" : r"""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""",
"clar_print_default.c" : r"""eJyFU8Fu2zAMPdtfwQUwIgVuenew9tZTsMuwU1sYqiW3AhzJkOhswNB/n0Q5rRws6Ukmxff4RD6XHgXqDo5WS+gG4drRaYOtNhpZ+ABUHtvOTgZriLGfNKpTorPGI3RvwsEmXRhxUJ6Xf8uCRUr+Cd+VBVH3bLW3QioJlUxsvoHKP5lVDbEjX3TIWTOGnygcKhlAIftelhde4d8mlPa3+folMaGcsy4lLr0gpTLkRy4D78pPoU8maSxIlVOjddhSrWdXpVMN6TbT4TRpj27qMJVRAWzoILmnlhAGy+FB6GFyqqG5Bgqeq6p801QeWOU5PIagks/weIPhiOVlURDrzR09NIvjLGK4Mhak8p3TI2q7gPR6yBGDNmF90+FFuTOeObvQBScjzHVpqAf/SlW6BzZfZM3h23f48Wu/54H+Ek9Wzpfbue4fa6JSlts8SQ9+TJ7JXpISfZi7kuf+iYDdMkOYzNJVF/QmNNzD+mENDay36y/00YbY///D3ObaSPWHVN1uwFg7wuZ2aWeqOLN4kn2tv3gJhl70D9uqYbvdUrOjaAcdroR7HXcU+vjnshjXkBZbHPt5Bh5lWBjla4LwhFFGsjl8L/8BsUiTTQ==""",
"clar_print_tap.c" : r"""eJyNVE1vnDAQPcOvmGWFBAiQot6yaqr2HFU9tLdKyAGzscLayDbbVlX+e8cDJPbuJtsTzPObmTcfdmwss6KFoxIdtAPTzaiFtI2Qwmb4A5Yb27RqkrYEZ5tJWL4CrZLGQvvINBTzgWQHbvL4bxxlLmT+6r5bIY94gq08ktBnyffP3+DItRFKws2HnzLJd/FzHL8h2TxOtlO/5HXZDuBaKz0D/yM3xDznXRxHoodsEwSMXmrYwsiM4R2wYYC0I2GZybGY0hOJhUV8MDxw7JkY0BGd2EHJ/am3l7BEvyiMtoa5qeu0O8/2dhspLPVQTod1xMbqqbUzjQhQ0MdrHbJdL9a8AFVVzSPzMJy5YXsOt5Ca1yKqu7mWg9mHdMNx/ML+uaVenEWj0QCcRSM8pLri4QLV4SGzx6ZfYjo8ZA5CrszOZzq8wXY8cJ2v67Ecddy0WozWbfTmI3z9cX/vLwuARzgV4B3lYafrur52OZSk1fEvLO2Du4bzhZhNUj0D8/rRhNdUqXFLWC3CUPiyop8gkcqCekqwGQl+3Jkf8MXEdHFE8kmc5qPSy86Z7EoFNNbs8pvj33IhO/470L2FoihQNWTbtMudQY313X3X92WwB5QcyMC9Ld0QKOeRNYPAI6b3445MjIQOzi5hWfF+UWbwxZrwRUq+YCMBfzdAO348JVAKFyKfY3LZZYv5HP8D5Mbj9w==""",
"clar_sandbox.c" : r"""eJydVWtP4kAU/dz+iism0gpKfWQ3G9YPm+gasioEMJgomdR2KhPplMwM7KLxv++dTqEP0DVrTKjcO+eec+6cKpWvWADBxBdAgqkvyMxXk/tT79uXcdu2pSkzrmwmycKfspCoeJY2OUHCpTJH9/UXrv1qW4PhjyEZglR42mIROBrC0eUm7Enlws4ZeK5tWYKqueDgrfp2BqQzOO/08cChVCROQupW+7Jnxw8CKmWGOiLdXy6cadi2/VbiHDFe5JsyfZxHERVNkOyFEgVTyp8M9V0W8ZBGQEadm5Nj28pwjMqse4EGBcmcKziD03alx+BTvkCjhLwfYw8aYtWG1z3UVWuCfko/Lszn7eCi3+t3f3auLmo2WG8oEaxsEtN6o0SAwxDHawOD7/n4NjQazE3hK7Ox+YkqfHDWRNgYjbGMyfilNlWfUozPqZ6SVjbXq1vNCJQpeDBbOivvsNRcOaehC0uyrDcbf22rtQ+dCNSE6m4mEh5TtC1MqOR19NNfgs+XasL4UxOUWIJKYC4ptHA+7Lfsd0jVdL2W8arSMsUSswIxJLVLp5Ia6EuqhjSe9TSocz7q9s9dc6wJBq5y+XYpD1lkdA0nTIJcSkXjtaApe6YooKRFiw/mQqTCmaCBSrD4gbjDd5UdfiRr9efBUTEAi4SFkEZ6zqXPw8fkj6O/S2OqCRTy7o11gOoPXj1XjVcDI1FMRDBBFcgSaRYMiSQRcQGsmkL0k01DklEwStc8CrdXF4jy2TRNTi3F09bcpT81nbZ1ZFcvjXLAcw4m3klUpOVigIpvHu2WbSEYTkO/8aEsoqr+FXD1PBExLu2FpnT1onvdQecOMKm/fRGCnPpyQmW65EKUrY0oaxF5iKv7YNk+HtJ9WFalBPVWfR219SIqGFrZARyN9RsX+82gcr3RyMH0PVpdu7wLGpppM1/ONmdxDDZllgF6xjgNHUKuOzeXo5NjQtyMXPyMkZmVjqLMm9urq4296P74Wd+34la9r5638S9EH8BkF0enKytPJfKf92ML7v8QWb1i8NQn5a5XmOe6HKEU4fMhhr29banbngCNYpJdJLrVixK9v7GvgW8=""",
"clar_fixtures.c" : r"""eJyFUV1LwzAUfW5+xZU9rLUVJ4ggZQ9DFAUfZEwQSglZmrBAl5Qkk6n43236tWbKfMvNOfecc+81llhBgSppLNAN0XCOuNjbnWa4InYTjpE1MSzxuD1Vki2L0BcKTKfn0EYgu57d3uRpjYhPhi1opSwumUwRCvo3zMFYXT9C5xA5stWSVh9hI5FAa+wUFG//osgJCA5tmQ1SF3CVw9kcppfTCAWBj8ZxDg3UN4/zZ7MaHBrHSBw7vpcJ4mGS5Ijtai9qnannNqk1q7myXU+KvhGaCF4wDnfPiyV+eHpbvS7v8cti9YjGq6Yl7lzCkxfo1L0j/lJOwOtrUrwrUcDBBRsii7Xan3bjBlNVL2WUzuMkgGlJdLuIP21oyYjcVf/a6G3ozXTQPRqmsZkwWQiOfgAVGffP""",
"clar_fs.c" : r"""eJylVdtu20YQfSa/YkAD8TKWY8dJX6L0wXDEVqgsBhINN7UFhiGX1qIkl9hd+dLG/57ZCynJUWEkfZE0s7NnZufMGe2xsqAlpJfj6ZsT399DgzUUojhKo8npb3Mg+ud8PBlNE/hq/NP4LJ5G49n5aTKOp71zNJvFs4vx06DzPz6MZ6HvS5UplkO+zAS89EtWUd7KtM3UkuS8kcqdGE/o/+t71tYm/ArTi8lk6HuS/UNTBRVtbtRyAGzo+x4rgaQ2zMaFvucJqlaicdd8z15AHKkE/rbxIQI6+DqrKp4TF3YAJ2GH/AxwTeu8fTBRA0jtl0Xp0K+sucAsx9suzPPauX2v5AIIMxYweO9AhnBwwELAbvTFXLGFrmf/aF+X4/Uu2L++3scEjwjmitRnQ/+x7/0tZ0XXecIaBTUv6AC22i/5SuRPnQWVynAy/z3CSYg/zpPZxVkCJQLp4m2YvYqVbJHrEHU7bJgG+y7IZNBQf1HBz2nNxQN5oeEHoDnnJdlOHYa2aa18dRetmlxziI8ZOl8bCV5ruk3u3ptw9OlUnaeMquxGorOfd/OcKs2kpEKlBFuMibHUuKUCm8gbW1aoOTge4HFwyZqC30l4EgdlhmYR+J4tVVBK1q0wpnv0U4JkKmqygxTDQEdfFKcfRpNRMsKx6zgzM7oLL+c4oz9A80aSs/jjp40U6bpmA46t0vgVzZpVS7TLApg3lOwe55A6ivMqE04hwcsgtCB7tJK0KxdH0pdLWlUpXylii3IVZuLm9mphsPXg6gsrqeXECtwH+Kl7jF96sLj4m6z1i773cGw1VLYCb5dEqoIKodnzgvmDVLQGtLl4B5/t7c+Q40ZwFL66bgLNmUfvmSKHr0Onsg5eT4LFp/c0vyWm1uPFwBTdBd9lTGGwvjCAF7b+Ad4b9mq9HP05TubJaXIxJ/b8f3DZU2lNU9Ivi+G2VNcL1dopLh3dt17IuC0LpHVDwuvA9TLtT21LrHm1EXlo9ly/s/4rwC5C1z00g6MvrDnK22DovCYoOJz1jpPFpsaN6412udkJndTNwdtF/zdiFF6vpMJxlNKIfD12hjQj7MiwD4qD7jkovbfcSEvtlVlTfOH3uxX+rKg3NL3B0dvFrh6I+rselNtN6F68oxk/+2araVBLuv3SZ6RvZL5q3BVi9r52bTgeUfZNwUr/G9kaoSs=""",
"clar_categorize.c" : r"""eJydVF1v0zAUfU5+xV3RkJOGiT6XTqrG4GUS0jQe0JgiN3XBUpoE20WMqf+d62u3Sxa3zXjJh32/zrnn3jdLsZKVgKub+W1+Nb+7/vzl9lv+8frT/OvNHYzwlm9KM4pj89gI/ANt1KYw8BRHRV1pA8VPriBNK74WehpHssKjelMZ/83Lsi6m8RaKkqu84Eb8qNVjXkqNFrE23MgCrGHeNpB/Ra430ohc6lxUfFGKJczg/fSohxJrsV6I5zOhO079EvoxfLJX+SDGLpauk6zIjwVCpfaZQZtJNEjiJ0eeRBJXtQImCQdI+ADW492loxjGY5nEUSRXwLAvBdeiWDcMQ2TejtpyLx8SmGEEaxspYTaqggnG9p/I0HZf/+9aLl8A4Mtlbur/AoGFnYXZ8E5omFgxkWkLG1zOPARSkLOJWicwnsEEK9+fElSY2QMERjasdZO1w0EKGjtXr1i76iSx4ZCKTsj7VlXj8QN2AotGw+1x0pyQ2AtW6I6oOUzx20OiJLpchBMd09jYJm8UiojZa8o4cF4m7dh9NZPACBTlTfmu8+53Qam8sKwm0Zxni1MFu1LbZDUKF9OfAFXPmsNi+1zRMO6mx/paxe2cWXDNJdbwl66VCQmGGp8F9ZL1uaFYQ2aWEK/Y6Fyf6+/VKAMHuDe4x7uB69HtSS8RX59f0mRL95DSK6yD8Kb103tIjBcExyIJ6v4w0bSsbEZkZB/1ojHKxgpeMDuXotSCkg3sp5cgO432zG5GotkLs5Ph4ABbHENGyq2u14w7Srgz6rudTUvHJQ7v1CGbw7I8RAG0Bv4BTkrJ+g==""",
"clar.h" : r"""eJy9VU1P4zAQPZNfYZo9JFUElCMLSAi1AqlCKyjavVmO4xBrEzvYzlK02v++4yRtmq922QOX1hn7zXuTeeO4PBYRixHGt8ubR7yaP63wHcaOC0EuWC/uuFzQtIgYutQmSnl4klw7zi/JI0RTojAmWjNlPOeIC4OoFBE3XIrAOYK1hkhCFJrGPGVBdSQFls4uU0qqTiximiqe17ksUCeySCNMQqmM/3VAA2avBUmx9nbzBOMPkLQXgMRjeblnAUOgoSybNFgzg2nKiChyr4x50/rRr56nfoCqhczJa8EaCTjWLahN6/LYtq9s0uL+x+r5cY6/3azunF0NFsrXplDMa3ehjGFBshZLHdZERKFcfwSyUbcH4jKwRNy8Dy4wJYa9SPXegm2CtsjT6dRBU3RTvn5wAMoIVVKjN24SxNZ5yik3qLQNypjW5IXB+dOtiYEmK7TBOTQQewBQAbKG8tueLXd8dH2FzgIw/uJ+OcfYrpb3D+VqsigELQVQkqYoJmDj6AJNkNvkDNDM7xHbk4eJL0d55+ucUcMiFLcEGFlqOKCgdu1B+uPxuoFfwXu1xFwjIQ0yqmBDvJte3SaM/vyPPlGL+6RGnfl95k/u1JCET2jUmX9gqIT8x3GqJQ1N2MPzcjk8Ch3Q7jvvgerSt4i2m6vj46Y7VEdjt4ahb8GeqMYrXdjeWsojXcRgJQupqDURZIO78/SNKMHFS1d9KWDAJ2PuWDG4XqthOJkMXxY100eyfq8gKCqU/TOWhK0ZLayrLiYDnlu951Ac6TivW13nK65ngT5vS9ruwaYfeLAdbBVuBU6eTKkr4zojhiblMOgZ/MIc2eX5yIW5/czPAj5MzD3YBGI+SOzyhoTvJwm9cBaEYyTHx7DtB/ZvmChsiML9RLmXz4L8fGeSPIj46OoKeRDeaZHtYsZMIiPon5VFbKuqJn35zdaGKYF3d/44m2/7X5/DZjE="""
}
if __name__ == '__main__':
    main()
