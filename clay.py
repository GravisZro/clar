#!/usr/bin/env python

from __future__ import with_statement
from string import Template
import re, fnmatch, os

VERSION = "0.3.0"

TEST_FUNC_REGEX = r"^(void\s+(test_%s__(\w+))\(\s*(void)?\s*\))\s*\{"

TEMPLATE_MAIN = Template(
r"""
/*
 * Clay v${version}
 *
 * This is an autogenerated file. Do not modify.
 * To add new unit tests or suites, regenerate the whole
 * file with `./clay`
 */

#define clay_print(...) ${clay_print}

${clay_library}

${extern_declarations}

${test_callbacks}

static const struct clay_suite _all_suites[] = {
	${test_suites}
};

static const char _suites_str[] = "${suites_str}";

int main(int argc, char *argv[])
{
	return clay_test(
		argc, argv, _suites_str, _all_suites,
		sizeof(_all_suites)/sizeof(_all_suites[0]));
}
""")

TEMPLATE_CALLBACKS = Template(
r"""
static const struct clay_func _${suite_name}_tests[] = {
	${callbacks}
};
""")

TEMPLATE_SUITE = Template(
r"""
	{
		"${clean_name}",
		${initialize},
		${cleanup},
		_${suite_name}_tests,
		${test_count}
	}
""")

def main():
	from optparse import OptionParser

	parser = OptionParser()

	parser.add_option('-c', '--clay-path', dest='clay_path')
	parser.add_option('-o', '--output', dest='output')
	parser.add_option('-v', '--report-to', dest='print_mode', default='stdout')

	options, args = parser.parse_args()

	for folder in args:
		builder = ClayTestBuilder(folder,
			clay_path = options.clay_path,
			output = options.output,
			print_mode = options.print_mode)

		builder.render()


class ClayTestBuilder:
	def __init__(self, folder_name, output = None, clay_path = None, print_mode = 'stdout'):
		self.declarations = []
		self.callbacks = []
		self.suites = {}

		self.clay_path = clay_path
		self.print_mode = print_mode
		self.output = output or os.path.join(folder_name, "clay_main.c")
		self.output_header = os.path.join(folder_name, "clay.h")

		self.modules = ["clay.c", "clay_sandbox.c"]

		self.test_files = []

		file_list = os.listdir(folder_name)
		for fname in fnmatch.filter(file_list, "*.c"):
			with open(fname) as f:
				if self._process_test_file(fname, f.read()):
					self.test_files.append(fname)

	def render(self):
		template = TEMPLATE_MAIN.substitute(
			clay_print = self._get_print_method(),
			clay_library = self._get_library(),
			extern_declarations = "\n".join(self.declarations),
			test_callbacks = "\n".join(self.callbacks),
			test_suites = ",\n\t".join(self.suites.values()),
			version = VERSION,
			suites_str = ', '.join(self.test_files)
		)

		with open(self.output, "w") as out:
			out.write(template)
			print ('Written test suite to "%s"' % self.output)
			print ('Suite file list: [%s]' % ", ".join(
				[os.path.basename(self.output)] + self.test_files)
			)

		with open(self.output_header, "w") as out:
			out.write(self._load_file('clay.h'))

	#####################################################
	# Internal methods
	#####################################################

	def _get_print_method(self):
		return {
			'stdout' : 'printf(__VA_ARGS__)',
			'stderr' : 'fprintf(stderr, __VA_ARGS__)',
			'silent' : ''
		}[self.print_mode]

	def _load_file(self, filename):
		if self.clay_path:
			filename = os.path.join(self.clay_path, filename)
			with open(filename) as cfile:
				return cfile.read()
		else:
			import zlib, base64, sys
			content = CLAY_FILES[filename]

			if sys.version_info >= (3, 0):
				content = bytearray(content, 'utf_8')
				content = base64.b64decode(content)
				content = zlib.decompress(content)
				return str(content)
			else:
				content = base64.b64decode(content)
				return zlib.decompress(content)

	def _get_library(self):
		return "\n".join(self._load_file(f) for f in self.modules)

	def _parse_comment(self, comment):
		comment = comment[2:-2]
		comment = comment.splitlines()
		comment = [line.strip() for line in comment]
		comment = "\n".join(comment)

		return comment

	def _cleanup_name(self, name):
		words = name.split("_")
		return " ".join(words).capitalize()

	def _process_test_file(self, file_name, contents):
		file_name = os.path.basename(file_name)
		file_name, _ = os.path.splitext(file_name)

		regex_string = TEST_FUNC_REGEX % file_name
		regex = re.compile(regex_string, re.MULTILINE)

		callbacks = {}

		for (declaration, symbol, short_name, _) in regex.findall(contents):
			self.declarations.append("extern %s;" % declaration)

			callbacks[short_name] = '{"%s", &%s}' % (
				short_name, symbol
			)

		initialize = callbacks.pop("initialize", "NULL")
		cleanup = callbacks.pop("cleanup", "NULL")

		if not callbacks:
			return False

		self.callbacks.append(TEMPLATE_CALLBACKS.substitute(
			suite_name = file_name,
			callbacks = ",\n\t".join(callbacks.values())
		).strip())

		self.suites[file_name] = TEMPLATE_SUITE.substitute(
			clean_name = self._cleanup_name(file_name),
			suite_name = file_name,
			initialize = initialize,
			cleanup = cleanup,
			test_count = len(callbacks)
		).strip()

		return True

CLAY_FILES = {
"clay.c" : r"""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""",
"clay_sandbox.c" : r"""eJx1VG1P2zAQ/uz8iiPVSrKGETa0acr6YRJlqii0akFMopUVEgesJU6J3Wps8N93jkNeCquiJvE9d/c895IeT2KWAL0eX3z6aPUIvnDBYDb5fnk6nZ/TxWgG+8vlvtVjqWT/Axxqu4h5YllShYpHEN2HBdAoDR/pOlT3N8f+18+roDZzoSwu6TZMeUxVti5BTpQLqYzre33gWn8tIlWxiRRoR/wLLFIwtSkEOKk+cjTOg75ULgyH4EO/bxHiLOh4cTKeO1J9kIpmecxceHpCizZMLs7aBtf4hFHEpKziXdPpmQnoBtZzhzbKb1Muyd5ukoQVHkj+h1EFKRN3NXtTjlJZZd6GBY3yjVAwhONgB2MCMrHF4hTyZoUYDEPsy/MZCrI90E/lbWTuV4vRfDafno4nI9sC8oxFBlJl4vjS63SY8AScH0xdsmw90wKck+vp/MQ1lD0wSlwXU1Z1Pgrq3pIkL8DhSMkPgMO3RkkAgwF3S6Y7MhB8xxQ+OLUmvsKikpLJHh7qXNpLcbFhSNhYXk+HhpoUeiZEtH50XuqOJu+l6jp0izshzxZe9dj4O/2EKGWhoEmexqx4ewJbh7mkURbrruzWldhFDIcSDh9gab+TS9sOqp3RpgwOiqRtqApaBo3yLAtF/LIjRIp1gcwSpzKYucrrd9ereHhQcmx2Qj5KxbIa15a6zXkM5T5uhETjbf7b0WdGYbsGzdbuzr7xf+3d1Ed7URXytBxcu8TrBv4sf7YWV6+IbnU5A92NatLXuluM2pPp6wgYCDPhQOBDl7qJ3voGaegBHK1gb9j5fpmh6gIHAy2gjQrMGGEmPXkNGgZajNdIr1Nnv7AZ6zYp/UW5uJpMdkUYdMyLjnr/i++7mqz/Fj667+LfRjaLgOT/ATlX1I8=""",
"clay.h" : r"""eJyFkUFrAyEQhc/xV0yyl91lKT23SaCUDQ0svTSXnsTqSARRo25J/311N4VsQprb88043zwtlDQCJVD62r180l37saNvlJIimcrglU8KZbjuBcIyRKHV18N+Tci3VQK4Zj+UshDQx5LMlInArREqKmsaMks6JGfPPNRSaWzGFp0oF1X03voLT2DgXrk8q3o+BwaMlGtkpnfl4Jb16ViN57pqYBTWsUOP+fpfumGCSyuXeHS+gUyppkGGSgXrFTw26TU2266lNKtu+z6oxaY3PO8FnGkNkqVs4gkWUJzNnBJzz13i8iawPTrkEQXICTnaAf4/+sS4B5/fjpvoHkPIWBXA2AjR93hFJQWmv5fkF3Vhx6U="""
}

if __name__ == '__main__':
	main()



