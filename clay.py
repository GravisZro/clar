#!/usr/bin/env python

from __future__ import with_statement
from string import Template
import re, fnmatch, os

VERSION = "0.7.0"

TEST_FUNC_REGEX = r"^(void\s+(test_%s__(\w+))\(\s*(void)?\s*\))\s*\{"

TEMPLATE_MAIN = Template(
r"""
/*
 * Clay v${version}
 *
 * This is an autogenerated file. Do not modify.
 * To add new unit tests or suites, regenerate the whole
 * file with `./clay`
 */

#define clay_print(...) ${clay_print}

${clay_library}

${extern_declarations}

static const struct clay_func _all_callbacks[] = {
    ${test_callbacks}
};

static const struct clay_suite _all_suites[] = {
    ${test_suites}
};

static const char _suites_str[] = "${suites_str}";

int main(int argc, char *argv[])
{
    return clay_test(
        argc, argv, _suites_str,
        _all_callbacks, ${cb_count},
        _all_suites, ${suite_count}
    );
}
""")

TEMPLATE_SUITE = Template(
r"""
    {
        "${clean_name}",
        ${initialize},
        ${cleanup},
        ${cb_ptr}, ${cb_count}
    }
""")

def main():
    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-c', '--clay-path', dest='clay_path')
    parser.add_option('-o', '--output', dest='output')
    parser.add_option('-v', '--report-to', dest='print_mode', default='stdout')

    options, args = parser.parse_args()

    for folder in args:
        builder = ClayTestBuilder(folder,
            clay_path = options.clay_path,
            output_folder = options.output,
            print_mode = options.print_mode)

        builder.render()


class ClayTestBuilder:
    def __init__(self, folder_name, output_folder = None, clay_path = None, print_mode = 'stdout'):
        self.declarations = []
        self.callbacks = []
        self.suites = []
        self.suite_list = []

        self.clay_path = os.path.abspath(clay_path)
        self.print_mode = print_mode

        folder_name = os.path.abspath(folder_name)
        if not output_folder:
            output_folder = folder_name

        self.output = os.path.join(output_folder, "clay_main.c")
        self.output_header = os.path.join(output_folder, "clay.h")

        self.modules = ["clay.c", "clay_sandbox.c", "clay_fixtures.c", "clay_fs.c"]

        print("Loading test suites...")

        for root, dirs, files in os.walk(folder_name):
            module_root = root[len(folder_name):]
            module_root = [c for c in module_root.split(os.sep) if c]

            tests_in_module = fnmatch.filter(files, "*.c")

            for test_file in tests_in_module:
                full_path = os.path.join(root, test_file)
                test_name = "_".join(module_root + [test_file[:-2]])

                with open(full_path) as f:
                    self._process_test_file(test_name, f.read())

        if not self.suites:
            raise RuntimeError(
                'No tests found under "%s"' % folder_name)

    def render(self):
        template = TEMPLATE_MAIN.substitute(
            version = VERSION,
            clay_print = self._get_print_method(),
            clay_library = self._get_library(),
            extern_declarations = "\n".join(self.declarations),

            suites_str = ", ".join(self.suite_list),

            test_callbacks = ",\n\t".join(self.callbacks),
            cb_count = len(self.callbacks),

            test_suites = ",\n\t".join(self.suites),
            suite_count = len(self.suites),
        )

        with open(self.output, "w") as out:
            out.write(template)

        with open(self.output_header, "w") as out:
            out.write(self._load_file('clay.h'))

        print ('Written test suite to "%s"' % self.output)
        print ('Written header to "%s"' % self.output_header)

    #####################################################
    # Internal methods
    #####################################################
    def _get_print_method(self):
        return {
                'stdout' : 'printf(__VA_ARGS__)',
                'stderr' : 'fprintf(stderr, __VA_ARGS__)',
                'silent' : ''
        }[self.print_mode]

    def _load_file(self, filename):
        if self.clay_path:
            filename = os.path.join(self.clay_path, filename)
            with open(filename) as cfile:
                return cfile.read()

        else:
            import zlib, base64, sys
            content = CLAY_FILES[filename]

            if sys.version_info >= (3, 0):
                content = bytearray(content, 'utf_8')
                content = base64.b64decode(content)
                content = zlib.decompress(content)
                return str(content)
            else:
                content = base64.b64decode(content)
                return zlib.decompress(content)

    def _get_library(self):
        return "\n".join(self._load_file(f) for f in self.modules)

    def _parse_comment(self, comment):
        comment = comment[2:-2]
        comment = comment.splitlines()
        comment = [line.strip() for line in comment]
        comment = "\n".join(comment)

        return comment

    def _process_test_file(self, test_name, contents):
        regex_string = TEST_FUNC_REGEX % test_name
        regex = re.compile(regex_string, re.MULTILINE)

        callbacks = []
        initialize = cleanup = "{NULL, NULL, 0}"

        for (declaration, symbol, short_name, _) in regex.findall(contents):
            self.declarations.append("extern %s;" % declaration)
            func_ptr = '{"%s", &%s, %d}' % (
                short_name, symbol, len(self.suites)
            )

            if short_name == 'initialize':
                initialize = func_ptr
            elif short_name == 'cleanup':
                cleanup = func_ptr
            else:
                callbacks.append(func_ptr)

        if not callbacks:
            return

        clean_name = test_name.replace("_", "::")

        suite = TEMPLATE_SUITE.substitute(
            clean_name = clean_name,
            initialize = initialize,
            cleanup = cleanup,
            cb_ptr = "&_all_callbacks[%d]" % len(self.callbacks),
            cb_count = len(callbacks)
        ).strip()

        self.callbacks += callbacks
        self.suites.append(suite)
        self.suite_list.append(clean_name)

        print("  %s (%d tests)" % (clean_name, len(callbacks)))

CLAY_FILES = {
"clay.c" : r"""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""",
"clay_sandbox.c" : r"""eJx9lG1v2kAMx18nn8INUkkKK+lWbZoyXkwqnVBpQUDVSS2K0uRSTg0XlLugsbXffXYuDQl9QIhczv+zf/bZtHgcsRj8m+HVl89my8AXLhhMRj/n5+PppT8bTKB9d9c2WyyR7D1Bj+wi4rFpShUoHkK4DDLwwyTY+utALW9P3e9fF15l5kKZXPqbIOGRr1brQmSHqZBKHz2iDcf8ZxpSZXmogA7ij2caGVN5JsBOaMsmXRcOpXKg3wcXDg9Nw7Bn/nB2NpzaUh1L5a/SiDnw9IQWMoyuLuoGR58JwpBJWfq78ccX2qHjmc8NbEy/jlzA3udxzLIuSP6X+QoSJh4qel2OIrPSvAkyP0xzoaAPp96eRjtkYoPFyeTtAjXoxrDmlxNMyOoCrYrHQD+vZ4PpZDo+H44GlgnGMxYZjDISx5dW44YNHoP9i6k5W60nlIB9djOenjkauQs6E8fBkGWdT7zqbo04zcDmiOR6wOHHLhMPOh3uFKR7aaD4gSlc2FVOfIFFNQqSA9ykWHRKcZEzBNaW191BUh2CekKE6639Unc0dV+qTq5r7IbxbOLXNHpHMIxBLRmpeZaKFcMbiFImRRuvJthCILZqycVDF1S2BZVCLhn0MD4c9cx3oCyyWyXXPpY2NshqYCXUfMklyK1UbFXRJPyRYfQGCJGHeZYV1DxjoUrR+AHZ8btYxx8yla9uvfE3KY+gmOZcyEBE9+kfm/aKHqf4tVF3FzQ47Tu3vesiutZY+tmqJtyfLO3/lfdaP9EpXwU8KcbCKvSU7+/iY9EoVQNIEYsOa87rLrye1jSuE9X73iUP6AgjYQFx0UR/lTZJP8HJAg76jX9HfQdNYadDCdRVZe0xEt3UTg0dSqa7S70KvXrEjlnXoajsV9ej0X4SWo0908je/ea6DsG6b+nDZVP/tnLXOQj/H4Mb8Qo=""",
"clay_fixtures.c" : r"""eJyFkU9LAzEQxc+bTzG2h+52V21BBCk9FFEUPIhUUEoJaTZLA9ukJKm0it/dZP/URGu9ZfJe3vwyow0xnAKVQhugS6Kgjwq+NRvF8JqYZewrC6JZFnhbqyArlqAPFOkmz6lVwOxicHU5H1mFvzNsQElpcMnECKGoPcMYtFH2ELsOiTMbJeh6F1cRGdSNXYIs6rskcQG8gLqc7aNOYTiHkzH0znsJiqJQTdM5VFL72OefDay4f+graer8AROk+59kP9yuDlAtU+utqBWzXlGPZ4Q+EeryImcFXD9MXvHt/cv0+ekGP06md8gfNS1x0yU+uoEmPVjir+QMgncVxeFmWB9vV2hMpZ2Khxd4MsC0JLt6EnazVXXWWDTWROQLuWW53cvQG06A/51wiPtN8hw8YFoyIjbr2N23iGoV/5nY6XeSf8gGrlGXiZwX6AuD+BMm""",
"clay_fs.c" : r"""eJydks9v0zAUx8/JX/GUA3NQSjsGl5UeOICENHGgnTZpRJnn2NQijSM/p3Sg/e8820nXjnHZJcr3+374+fOMjjstQLcuxbVsmsr0jok1t/AahGnRAbc/tjdlnv5JE8oCpIIe52nS6bpyQN95GgQsQBn7k+VeawXMex9glgNVJqqzVK0YulpaW5CTZMt7dHIDpI09h9tYfQuCNw0orhtZv/neZtQvSeROOzY59f8PB+0Xi7G/3EmxZWHWWVmEocfkX1w7SvYFBbyK8xdUR2ErXW9buPp0/WW1XH1cXS5ZjFOQSjHC2RpdpworYbp7FqFEQhWa3gpZwKFZS3SBVpRhpPflfNSxhCTq35IARl01svXcoiKU6Gzdd2w4wc/6mBjD9MP20YgkypuDzAmclp7SyfQkJ0r/S4CZbzHQI5lN73Q7FV02H9yQlE2+7Y233tjfJVhn3hreTu4pjIF3PvD18uLCHyKaatOjqzqOWDE/0/7ZhaX5p5F9DtsHZ8AzB0fNQOkdLUuid5G39Z3ZZWkS7q6slI8s/l2c3Rytbch8sqOz8jkGdvOUgVXHEMYbPwPjpXduJG/7DtxaHt/0If0LZusiXA==""",
"clay.h" : r"""eJy9VMtu2zAQPEdfsbUuliDE7jVNAxiBjRgwgqJ1kPZEMNQqJiqTKkk17t+XpCQ/ZKlqe/BJ1JKzM7s7ZMgzkWIGhNyvZt/Iev5lTR4ICUIb5ALP4kHIBcvLFOFWmzTnL9ebuyD4KXkKLKe/CKFaozLj4IoLA0yKlBsuRRJc2bW2kQ1VEGc8x6Q6kluW1i4qJVUrlqJmihd1LgfUG1nmKaEvUpnow14D0WgIy5GKshj72Diuf6PqP44SqBayoD9KdOCQZ64LvtbF8uv66fOcfJqtH4JjDTZ5xnemVDg+LcbHiKBbl6sbQfSfMI32Jnys326HaNuYBcEkjgOIYeZbbDsBW8qU1PDGzQZwV+SccQO+fbBFrekr2vOT/TAtw7bUhhR2SGRsASoB19jodHZ+J4K7jzBNrAEWy9WcELdaLR/9arQoBfMCGM1zyKgdZ3oDIwgPORN4H50Ru5PDxLe9vPNdgcxgCtmJACO9hgEFFckw/bv+ui2/sn11xFyDkAaMKrGLt5nV/QbZ9/+YE3O4Cw1qGp0zX3hSXRIuMKhpNHCphPzL61RLOr1hVTCBx6fVqvsytGBV13thdfl7TOPoU0C/9YaqOZjuwHFsxF5hB8+0gQMV+UNtTLuepqCFVMw5yqa0j+TkjSrBxWu7CK+iwzR9VlmjfZWrm3E96n45aqZ/yfpcQSAtlfsYR4I7ZKWz2M3o2ID16/4bphd7Mw=="""
}


if __name__ == '__main__':
    main()
