#!/usr/bin/env python

from __future__ import with_statement
from string import Template
import re, fnmatch, os

VERSION = "0.8.0"

TEST_FUNC_REGEX = r"^(void\s+(test_%s__(\w+))\(\s*(void)?\s*\))\s*\{"

CLAY_HEADER = """
/*
 * Clay v0.8.0
 *
 * This is an autogenerated file. Do not modify.
 * To add new unit tests or suites, regenerate the whole
 * file with `./clay`
 */
"""

TEMPLATE_SUITE = Template(
r"""
    {
        "${clean_name}",
        ${initialize},
        ${cleanup},
        ${cb_ptr}, ${cb_count}
    }
""")

def main():
    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-c', '--clay-path', dest='clay_path')
    parser.add_option('-v', '--report-to', dest='print_mode', default='stdout')

    options, args = parser.parse_args()

    for folder in args:
        builder = ClayTestBuilder(folder,
            clay_path = options.clay_path,
            print_mode = options.print_mode)

        builder.render()


class ClayTestBuilder:
    def __init__(self, path, clay_path = None, print_mode = 'stdout'):
        self.declarations = []
        self.callbacks = []
        self.suites = []
        self.suite_list = []

        self.clay_path = os.path.abspath(clay_path) if clay_path else None
        self.print_mode = print_mode

        self.path = os.path.abspath(path)
        self.modules = ["clay_sandbox.c", "clay_fixtures.c", "clay_fs.c"]

        print("Loading test suites...")

        for root, dirs, files in os.walk(self.path):
            module_root = root[len(self.path):]
            module_root = [c for c in module_root.split(os.sep) if c]

            tests_in_module = fnmatch.filter(files, "*.c")
            tests_in_module.sort()

            for test_file in tests_in_module:
                full_path = os.path.join(root, test_file)
                test_name = "_".join(module_root + [test_file[:-2]])

                with open(full_path) as f:
                    self._process_test_file(test_name, f.read())

        if not self.suites:
            raise RuntimeError(
                'No tests found under "%s"' % folder_name)

    def render(self):
        main_file = os.path.join(self.path, 'clay_main.c')
        with open(main_file, "w") as out:
            template = Template(self._load_file('clay.c'))

            output = template.substitute(
                clay_print = self._get_print_method(),
                clay_modules = self._get_modules(),

                suites_str = ", ".join(self.suite_list),

                test_callbacks = ",\n\t".join(self.callbacks),
                cb_count = len(self.callbacks),

                test_suites = ",\n\t".join(self.suites),
                suite_count = len(self.suites),
            )

            out.write(output)

        header_file = os.path.join(self.path, 'clay.h')
        with open(header_file, "w") as out:
            template = Template(self._load_file('clay.h'))

            output = template.substitute(
                extern_declarations = "\n".join(self.declarations),
            )

            out.write(output)

        print ('Written Clay suite to "%s"' % self.path)

    #####################################################
    # Internal methods
    #####################################################
    def _get_print_method(self):
        return {
                'stdout' : 'printf(__VA_ARGS__)',
                'stderr' : 'fprintf(stderr, __VA_ARGS__)',
                'silent' : ''
        }[self.print_mode]

    def _load_file(self, filename):
        if self.clay_path:
            filename = os.path.join(self.clay_path, filename)
            with open(filename) as cfile:
                return cfile.read()

        else:
            import zlib, base64, sys
            content = CLAY_FILES[filename]

            if sys.version_info >= (3, 0):
                content = bytearray(content, 'utf_8')
                content = base64.b64decode(content)
                content = zlib.decompress(content)
                return str(content)
            else:
                content = base64.b64decode(content)
                return zlib.decompress(content)

    def _get_modules(self):
        return "\n".join(self._load_file(f) for f in self.modules)

    def _parse_comment(self, comment):
        comment = comment[2:-2]
        comment = comment.splitlines()
        comment = [line.strip() for line in comment]
        comment = "\n".join(comment)

        return comment

    def _process_test_file(self, test_name, contents):
        regex_string = TEST_FUNC_REGEX % test_name
        regex = re.compile(regex_string, re.MULTILINE)

        callbacks = []
        initialize = cleanup = "{NULL, NULL, 0}"

        for (declaration, symbol, short_name, _) in regex.findall(contents):
            self.declarations.append("extern %s;" % declaration)
            func_ptr = '{"%s", &%s, %d}' % (
                short_name, symbol, len(self.suites)
            )

            if short_name == 'initialize':
                initialize = func_ptr
            elif short_name == 'cleanup':
                cleanup = func_ptr
            else:
                callbacks.append(func_ptr)

        if not callbacks:
            return

        clean_name = test_name.replace("_", "::")

        suite = TEMPLATE_SUITE.substitute(
            clean_name = clean_name,
            initialize = initialize,
            cleanup = cleanup,
            cb_ptr = "&_all_callbacks[%d]" % len(self.callbacks),
            cb_count = len(callbacks)
        ).strip()

        self.callbacks += callbacks
        self.suites.append(suite)
        self.suite_list.append(clean_name)

        print("  %s (%d tests)" % (clean_name, len(callbacks)))



CLAY_FILES = {
"clay.c" : r"""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""",
"clay_sandbox.c" : r"""eJyNVe9P2zAQ/ez8FUeRaEILDRvaNHV8mASbqjFa0SKQoIpC4lCLxKlst1tB/O8722nzg8KGkBp653fvvfMLUoWKRRDNQgFBlIarYB6q2e2x/+XTtO840pYZVw6TwTJMWRyobG6a3CjnUtmj+/oLz3l2yHjybRJMQCo8TVgCroZwdbkLe1J5sHMCvucQIqhaCA7+um9nHAzGp4NLPHAoVZDlMfWafcWzG0YRlbJAvQ6GPz040bB956XGOWG8ytcwvV8kCRVdkOyJBgpSyh8s9V2W8JgmEFwPLj5+cEiBY1UW3ctQBFG+4ApO4Ljf6LH4lC/RKCFvp9iDhpDW5NcIdbW6oJ/Mx5n9vBqfXY4uh98H52ctB8gLSgRSTGJab5ILcBni+H1g8LUc34dOh3kGvjEbmx+owgd3Q4RN0RhiTcYvtan6lGJ8QfUUU3m9Xt1qR6BMwaP5yl17h6Xu2jkNXVkSIS8O/jqktw+DBNSM6m4mcp5RtC3OqeRt9DNcQchXasb4QxeUWIHKYSEp9HA+7PecN0i1dL1V8GrSssUaswoxJLVLU0kt9A+qJjSbjzSoe3o9vDz17LEuWLjG5dulPGaJ1TWZMQlyJRXNNoJS9khRQE2LFh8thDDCmaCRyrH4jrjDN5Udvidr/efBUTUAy5zFYCK94DLk8X3+x9XfmZhqApW8+1MdoPad3y5V49XASFQTEc1QBbJEmhVDEhmIrALWTCH6ydI4KChYpRseldurC4EKWWqS0zJ42pob89PSadtEdv3SqAe85GDjnSdVWh4GqPrm0W45BMFwGvqND3URTfXPgKvnuchwaU/U0NWLHg3HgxvApP4ORQwyDeWMSrPkSpTJqyhrEWWIm/tgxT7uzD4IaZSg3WtvorZZRANDKzuAo6l+42K/HVSvdzolmL5H62tXdkFHM+2Wy9nmLI7Bpi2WGUbZI+ZkHsh/rqfxn8HuR0Nkj/reVY/7n31/64FKwvGUHlwjiqZeXJ2fvzpUOFjGqn6DDcL/Zwj29rZd+u0XUKPYYFWJbvWiRu8v0v5ccQ==""",
"clay_fixtures.c" : r"""eJyFUV1LwzAUfW5+xZU9rLUVJ4ggZQ9DFAUfRCZMRglZmrBAl5Qkk03xv9v0a82U+Zabc+45595rLLGCAlXSWKBrouEccbGzW81wSew6HCIrYljicTuqJBsWoS8UmFbPobXA8npye5OlFSI+GbaglbK4YDJFKOjeMAVjdfUInUPkyFZLWu7DWiKBxtgpKN78RZETEByactlLXcBVBmdTGF+OIxQEPhrHGdRQ1zzMv5xUYN84ROLY8b1MEPeTJEdsV3tRq0wdt06tWcWVzXpS9I3QSPCccbh7nr3jh6fF/O31Hr/M5o9ouGpa4NYlPHmBVt074i/lBLy+OsWHEjkcXLAhMl+p3Wk3bjBV1VIG6TxOApgWZN8s4k8bWjAit+W/NnoTejMddI+GqW1GTOaCox8pOffr""",
"clay_fs.c" : r"""eJylVdtu20YQfSa/YkAD8TKWY8dJX6L0wXDEVqgsBhINN7UFhiGX1qIkl9hd+dLG/57ZCynJUWEkfZE0s7NnZufMGe2xsqAlpJfj6ZsT399DgzUUojhKo8npb3Mg+ud8PBlNE/hq/NP4LJ5G49n5aTKOp71zNJvFs4vx06DzPz6MZ6HvS5UplkO+zAS89EtWUd7KtM3UkuS8kcqdGE/o/+t71tYm/ArTi8lk6HuS/UNTBRVtbtRyAGzo+x4rgaQ2zMaFvucJqlaicdd8z15AHKkE/rbxIQI6+DqrKp4TF3YAJ2GH/AxwTeu8fTBRA0jtl0Xp0K+sucAsx9suzPPauX2v5AIIMxYweO9AhnBwwELAbvTFXLGFrmf/aF+X4/Uu2L++3scEjwjmitRnQ/+x7/0tZ0XXecIaBTUv6AC22i/5SuRPnQWVynAy/z3CSYg/zpPZxVkCJQLp4m2YvYqVbJHrEHU7bJgG+y7IZNBQf1HBz2nNxQN5oeEHoDnnJdlOHYa2aa18dRetmlxziI8ZOl8bCV5ruk3u3ptw9OlUnaeMquxGorOfd/OcKs2kpEKlBFuMibHUuKUCm8gbW1aoOTge4HFwyZqC30l4EgdlhmYR+J4tVVBK1q0wpnv0U4JkKmqygxTDQEdfFKcfRpNRMsKx6zgzM7oLL+c4oz9A80aSs/jjp40U6bpmA46t0vgVzZpVS7TLApg3lOwe55A6ivMqe3AKCV4GoQXZo5WkXbk4kr5c0qpK+UoRW5SrMBM3t1cLg60HV19YSS0nVuA+wE/dY/zSg8XF32StX/S9h2OrobIVeLskUhVUCM2eF8wfpKI1oM3FO/hsb3+GHDeCo/DVdRNozjx6zxQ5fB06lXXwehIsPr2n+S0xtR4vBqboLvguYwqD9YUBvLD1D/DesFfr5ejPcTJPTpOLObHn/4PLnkprmpJ+WQy3pbpeqNZOcenovvVCxm1ZIK0bEl4Hrpdpf2pbYs2rjchDs+f6nfVfAXYRuu6hGRx9Yc1R3gZD5zVBweGsd5wsNjVuXG+0y81O6KRuDt4u+r8Ro/B6JRWOo5RG5OuxM6QZYUeGfVAcdM9B6b3lRlpqr8ya4gu/363wZ0W9oekNjt4udvVA1N/1oNxuQvfiHc342TdbTYNa0u2XPiN9I/NV464Qs/e1a8PxiLJvClb63wD3Q6FA""",
"clay.h" : r"""eJy9Vctu2zAQPEdfsbV6sAQhTq9pGsAIbMSAERStg7YngqZWEVGZVEmqcVH030NSfkm2qqYHn0wtOTuzu0M65JlIMQNC7ubjb2Qx+bwg94QEoQ1ygUfxIOSCFVWKcKNNWvDlZX4bBD8lT4EV9BchVGtUZhhccGGASZFyw6VIggu71jaSUwVxxgtM6iOFZWntolJStWIpaqZ4ucnlgDqXVZESupTKRO93GohGQ1iBVFTl0MeG8eYzqr/jKIF6IUv6o0IL3mIz3YC6tCHPXH98F6azr4vHTxPycby4Dw7VOShfm0rhsFmmjxFBVw2WTVhTkS7l+jWQrbq/QEK0Pc+CYBTHAcQw9vOwbYMVZUpqeOYmB1yXBWfcgO81rFBr+oT2/Gg3ecu6qrQhpZ0oGVqASsBNIWoO2u9EcPsBrhLrlulsPiHEreazB78aTCvBvABGiwIyamefXsMAwn3OBN5FR8TuZD/xTSfvZF0iM5hC1hBgpNfQo6Am6ad/01235Ve2r46YaxDSgFEVnuLdzuouR/b9P+bEHO5Mg7qKjpnPPKlTEs4wqKuo51IJ+Y/XaSOpecPqYAIPj/P56cvQgtVd74Rtyt9hto5uArqt11fN3nR7jkMjdgrbe6YN7KnIH2pjOuqZSsWcoWxG+zaOnqkSXDy1a/AiTnimyykLtK9ufTEuB6cfjg3Ta7J+qSGQVsr9GEeCa2SVc9j14IT/vI4VmlymdtOSKOrOal/f29+4NqgEOdz5E2z/GF4ABeagMA=="""
}
if __name__ == '__main__':
    main()
