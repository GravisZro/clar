#!/usr/bin/env python

from __future__ import with_statement
from string import Template
import re, fnmatch, os

VERSION = "0.7.0"

TEST_FUNC_REGEX = r"^(void\s+(test_%s__(\w+))\(\s*(void)?\s*\))\s*\{"

TEMPLATE_MAIN = Template(
r"""
/*
 * Clay v${version}
 *
 * This is an autogenerated file. Do not modify.
 * To add new unit tests or suites, regenerate the whole
 * file with `./clay`
 */

#define clay_print(...) ${clay_print}

${clay_library}

${extern_declarations}

static const struct clay_func _all_callbacks[] = {
    ${test_callbacks}
};

static const struct clay_suite _all_suites[] = {
    ${test_suites}
};

static const char _suites_str[] = "${suites_str}";

int main(int argc, char *argv[])
{
    return clay_test(
        argc, argv, _suites_str,
        _all_callbacks, ${cb_count},
        _all_suites, ${suite_count}
    );
}
""")

TEMPLATE_SUITE = Template(
r"""
    {
        "${clean_name}",
        ${initialize},
        ${cleanup},
        ${cb_ptr}, ${cb_count}
    }
""")

def main():
    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option('-c', '--clay-path', dest='clay_path')
    parser.add_option('-o', '--output', dest='output')
    parser.add_option('-v', '--report-to', dest='print_mode', default='stdout')

    options, args = parser.parse_args()

    for folder in args:
        builder = ClayTestBuilder(folder,
            clay_path = options.clay_path,
            output_folder = options.output,
            print_mode = options.print_mode)

        builder.render()


class ClayTestBuilder:
    def __init__(self, folder_name, output_folder = None, clay_path = None, print_mode = 'stdout'):
        self.declarations = []
        self.callbacks = []
        self.suites = []
        self.suite_list = []

        self.clay_path = os.path.abspath(clay_path) if clay_path else None
        self.print_mode = print_mode

        folder_name = os.path.abspath(folder_name)
        if not output_folder:
            output_folder = folder_name

        self.output = os.path.join(output_folder, "clay_main.c")
        self.output_header = os.path.join(output_folder, "clay.h")

        self.modules = ["clay.c", "clay_sandbox.c", "clay_fixtures.c", "clay_fs.c"]

        print("Loading test suites...")

        for root, dirs, files in os.walk(folder_name):
            module_root = root[len(folder_name):]
            module_root = [c for c in module_root.split(os.sep) if c]

            tests_in_module = fnmatch.filter(files, "*.c")

            for test_file in tests_in_module:
                full_path = os.path.join(root, test_file)
                test_name = "_".join(module_root + [test_file[:-2]])

                with open(full_path) as f:
                    self._process_test_file(test_name, f.read())

        if not self.suites:
            raise RuntimeError(
                'No tests found under "%s"' % folder_name)

    def render(self):
        template = TEMPLATE_MAIN.substitute(
            version = VERSION,
            clay_print = self._get_print_method(),
            clay_library = self._get_library(),
            extern_declarations = "\n".join(self.declarations),

            suites_str = ", ".join(self.suite_list),

            test_callbacks = ",\n\t".join(self.callbacks),
            cb_count = len(self.callbacks),

            test_suites = ",\n\t".join(self.suites),
            suite_count = len(self.suites),
        )

        with open(self.output, "w") as out:
            out.write(template)

        with open(self.output_header, "w") as out:
            out.write(self._load_file('clay.h'))

        print ('Written test suite to "%s"' % self.output)
        print ('Written header to "%s"' % self.output_header)

    #####################################################
    # Internal methods
    #####################################################
    def _get_print_method(self):
        return {
                'stdout' : 'printf(__VA_ARGS__)',
                'stderr' : 'fprintf(stderr, __VA_ARGS__)',
                'silent' : ''
        }[self.print_mode]

    def _load_file(self, filename):
        if self.clay_path:
            filename = os.path.join(self.clay_path, filename)
            with open(filename) as cfile:
                return cfile.read()

        else:
            import zlib, base64, sys
            content = CLAY_FILES[filename]

            if sys.version_info >= (3, 0):
                content = bytearray(content, 'utf_8')
                content = base64.b64decode(content)
                content = zlib.decompress(content)
                return str(content)
            else:
                content = base64.b64decode(content)
                return zlib.decompress(content)

    def _get_library(self):
        return "\n".join(self._load_file(f) for f in self.modules)

    def _parse_comment(self, comment):
        comment = comment[2:-2]
        comment = comment.splitlines()
        comment = [line.strip() for line in comment]
        comment = "\n".join(comment)

        return comment

    def _process_test_file(self, test_name, contents):
        regex_string = TEST_FUNC_REGEX % test_name
        regex = re.compile(regex_string, re.MULTILINE)

        callbacks = []
        initialize = cleanup = "{NULL, NULL, 0}"

        for (declaration, symbol, short_name, _) in regex.findall(contents):
            self.declarations.append("extern %s;" % declaration)
            func_ptr = '{"%s", &%s, %d}' % (
                short_name, symbol, len(self.suites)
            )

            if short_name == 'initialize':
                initialize = func_ptr
            elif short_name == 'cleanup':
                cleanup = func_ptr
            else:
                callbacks.append(func_ptr)

        if not callbacks:
            return

        clean_name = test_name.replace("_", "::")

        suite = TEMPLATE_SUITE.substitute(
            clean_name = clean_name,
            initialize = initialize,
            cleanup = cleanup,
            cb_ptr = "&_all_callbacks[%d]" % len(self.callbacks),
            cb_count = len(callbacks)
        ).strip()

        self.callbacks += callbacks
        self.suites.append(suite)
        self.suite_list.append(clean_name)

        print("  %s (%d tests)" % (clean_name, len(callbacks)))

CLAY_FILES = {
"clay.c" : r"""eJy9WFtz27YSfqZ+BaKMLdKmFTt9kxp3Mj3H08zJtJ3YmeaM4+FAJGShoUiWAGP7tP7v3cWN4E3tw5k+SQR2F99esLvYl7xI8yZj5FsqBKvlcnc5e+nWBJO/7qvemsxyvhms8bK/VPPivru2p3KHK7NXJ6RmvzW8ZhnZljURtMg25SMwkJNXvpAn8Uo+VUz0ZMOykFSBheVtxrYk+eXdj9+8nr0MHNUDL7LyQbO2qwZnu3C9Y3lOK66Xq5re7ylJy/2eFTIETWMyF0jyzet5BKcFcBgvGMHzwwoUiuFvRJLud0u3/5Lx2mzsy4wBabvk0dE0ZUJ0CYdrvlzJ9pWWgiLbLw/kL8lP/yHnr9uF6+Td9b/efQgfIxI+kmOSwMIVLETkxRtyPgvQ2GhN8F6TSq0Vub55e5PcrGcvWS6Yb7qm4OB5NFyfscdXZHw7ax04T3P6tNzNZzOk4yn5WnIIBJHU+zAtCyFJuqM1OUlE2dQpi9Z9urSsnsYoY+IvZgw8scZDFCY8NGF1DfH2+yzwCSUQrmeglyT4Nyma/YbV6y6RaLhkvbUtz5lhzMG844zqyGQv7nHdAktrXkleFgAvGOI7KdgjIHpeOwsZmh5wmkr+lSUG/8iOAa0hqg99grDqlpLmbskzQVo2hZwA5ySM7OUUmNV/ZFb+Ck/yMoVT0pzRoqmiUK2egGf0fnc7qehTXtLMANzyR9nUTCQmRbAM5UJSSjbNlsia7qsSTW/1cQsJK+gmR/JnkiDCXiBsmyLtm7Oge7Z2qCtZa6yIVPD/gZ2NCQvrmlac2piQNziWF1xymoPIsV1jCOfQAYGKV9GC8h2GuCC7XtXl3gDTdlummFn9a6R2m8LsW0UNBdrSZ7fbvoSZIqibQsVfeBhuPL3dWuMAkQ2e2e/a0fpSAekb7d1lN7hngV4dxgMwXKhI35JQl7ewTxqRN5AMI/SmImsBnl1CUGCq/PHj+/cRbAe9vRBtFASosfsOng/DObdwNE3nNvhnjWyPsdgLFFmxZn2A3V9XuE0l/f792/8mV+8+3Xz88O/k57c3P/johvdRi0rMhkMWtXnfKu/C9PQUsakmYF9+hdpXPBGlwxl4xMY/2TO5KzOBcTumO9GarEc3rREcEUQWBlMFTYkM50fpPLYa+YFDLl1gReQ7srhakBVZLBegzPNI7CtpmjXEoIT0byvQVNpUAexDIeQoi8gV5TlYb/W5AGAgJhogFqvVkSDhkYjILXwcZXfk9kzCD7KAC5T0s0uljfdt7l4wL0rilR2fBYuY9+kVsp4cszrABioIBdzQuoLnQtBseAC6gTgty2MZnAt0E46pWVXWxjNC5y6bOLhOAJN1LbbFd6ZVdwnGVb2HHRjM6OTUUMkCGYHeQNdifPVsqJyeGv0wOwTbmrERC/X21KdFZEQ/jysPGVmFQTgMRV2mdC+jQ/FAzoaDFKH2vldweJtg/T6jpTeFb+SCmXSHTX/I1Rd45Fv/HFPJyOkp11btHGRw4c8tv1uag4JuKTo22zE5NoK9GuPWbEk5bEh4k+RjlvyL0jYw9JQt/r4dhxawBLOe/grV39R9TPFG0HvW6a9pfa+0UGG8DecfkWIFd5XclipaBeQhdW+Rct0S/qR3V/quumVCzuSnT5/lZ/mhKUhZ5E9E7phSiugsQ2B7wCNGeLTJ+kzskcvw7GIqcdNasASgilBnBfibxkZXVPbroVaE5vmGpl9E7C5EutFR+5eh4PHoUFBsbXLq3I0LfTcQm3cdnEMafKECGcKFYF/bPYwTfFgEgalJqiXBNGyZbs/vMHEtzhaqh/F8rmSd3+kuRgvSJ2i+C3UKiMQQlbUscyeTnJLXEF/2MyYX55E7uIWLx34+X5A//kBkoN35QQjigct0B8gVFGMAKhhZyMVK9V8gPdQWjVDg5RvnDE0NOdQEEDxV4eLBc/7Gi7KjjGQlE6Qooad8hOfs0ivByN0GEnxgJ9etV9eS1hLauFAX6MhUY0Cu3H3rguUWRN6Z+1/oxKUJexS4oXUP+knouEtqb/PkIRrzpmb0ixKoDScmDedH5JTtrv3b9n813omyHTEq+bbomEIVtmOPqq8ltLC0yeVqMqwQSSfjAxadFsw75nBC8KYB0AXL+p/PFL4J30OTCxYET2iule2fsCGNPE5rWYTs+rIXnTdepL3e8znacY79KRwjSzuqa9M1eKVgNXpeUeLlwjneA89zUtVlyoAPbvGubKQ351uaPP1skKC9ofu+MFe8l6S1N4wbvCsTt/Y06sUda6GezwTHVkps276MxqGGhBYY604GfckBBwKrDVGdmPsBLNo47Pe0xjAjfWzbALfPdiStGby8CtOmdic6IL6teoke8ZoIB/QZx6waD2dacTvTiieGWb11r3E1zAI8nmcJ3YAGKmynOm73TrWAsCJonfwuHJ1epuEFeBjcWGJ89uRFUfclbdus/hPatV+d480r0s2vRp7ebk83976EAbe35z2h3GuiO7kbPrIcoT/c6Tzy+qLsfNJ71QGJmVAO33awZ+Zm/Vebha5Hlto4Ey+3kXedagyypgr7L7dhA4xjgGAYtXo6oOYzfgi5ccyLqVmKuZYj+QsTGByg9VoR2psxkJpyAWmKFlDGUqYwL+e6sPglTFWwvCzux6ZGMdFUz/bSwSGJYNJNRMxYsT8GjfU47qSs6G+N/1boTzvaueDhgYcWhHf/T+BBgAI=""",
"clay_sandbox.c" : r"""eJx9lG1v2jAQx18nn+JKpZGUrKRbtWlifTGp3YTGCgKqVmpRlCZOY5U4yDZstOp3310cSAhtERIhd7773cPfSoeaRxCloYQgmofrYBHq9PbU//Zl1rNtZcxcaJurYBXOeRzobFE4OVEulDZHj+iFaz/b1mT6YxpMQWk8bfEEHArhkNmDD0q7cHAGvmtblmR6KQX4G7+DSdCfnPfHeOBY6SDLY+Y2/cpnJ4wiplQZ9ToY/nbhjML27Jcd5oSLOm9Ber9MEiY9UPyJBRrmTDyU6OVBU1ZpXoUyiPKl0HAGp72GjwnIxAo7I9XtDH0wjNWa/hlhIS0P6Kn4uTC/V5OL8Wg8/NkfXLRssF6wJrDKTBz/HPIkZgkE1/3Lz59MW34xPWXZYkQFOOfXw/G5a5A9MJXUm3TSsw+ZiHmCvUpyCQ5HJL8HHL5XlfSg0+FuQdooA50fmMYHZ1sTn2FTLTMgfEm56JTmYsloIoVlfzXI1aTAjkkRLdbOpu9o8jZdp9A1dst6sfFrW90j6CegU0beXOYiYziBOGdKtHE04RpCsdYpFw8eaLkGncNSMehifjjq2m9AtcjeKrmaWMa4Q1YDK6GmKVeg1kqzbEsz548Ms++AEHm0lLKg5pJFOkfjO2THb2Idv8tUiaNa/FXOYyikvBQqFPF9/s+hd8WOU/6azv0ZCad957erLdrfwyjFIhASKesLpgKZ1YI11WcY9ghqO0enAh3yeSGdVuFPPbkpPi2S21ak22tiV9NVeqPoPKkT7V0gGAgzYZPxYRe9WfMz4LxFLjOc1BMrUGm6o+GkfwOorb+hjEHNQ5UyVUy2pmNrT3xUQCW75hR4OYW7YgqW1TBBu9veimPb/kYMquwjnMzofkV/k2jX3ulUwWh5sA20apUTdAjUq+bibrqePeLKL+odI+LLq8Hgtas8e6R9qY/G/+r7b1/9Zr/qwV/zrFYf4f8Dku4Lzg==""",
"clay_fixtures.c" : r"""eJyFkU9LAzEQxc+bTzG2h+52V21BBCk9FFEUPIhUUEoJaTZLA9ukJKm0it/dZP/URGu9ZfJe3vwyow0xnAKVQhugS6Kgjwq+NRvF8JqYZewrC6JZFnhbqyArlqAPFOkmz6lVwOxicHU5H1mFvzNsQElpcMnECKGoPcMYtFH2ELsOiTMbJeh6F1cRGdSNXYIs6rskcQG8gLqc7aNOYTiHkzH0znsJiqJQTdM5VFL72OefDay4f+graer8AROk+59kP9yuDlAtU+utqBWzXlGPZ4Q+EeryImcFXD9MXvHt/cv0+ekGP06md8gfNS1x0yU+uoEmPVjir+QMgncVxeFmWB9vV2hMpZ2Khxd4MsC0JLt6EnazVXXWWDTWROQLuWW53cvQG06A/51wiPtN8hw8YFoyIjbr2N23iGoV/5nY6XeSf8gGrlGXiZwX6AuD+BMm""",
"clay_fs.c" : r"""eJylVG1v2zYQ/iz+ioMDNNTiNGnSfamzD0FircYcq7AVpF1iKIpExcQkUSDpvGzLf++RlOSXpijWfbF8x+Nzx+e5ux2eZyyH+Go0OT4iZAcNXjEIwiAOxqe/z4Cav7PReDiJ4F/rn4Rn4SQYTS9Oo1E46ZzD6TScXo62gy7+OB9NfUKUTjRPIV0kEn4hOS+YqFVcJ3pBU1Ep3ZxYj0/+IZ6zjQm/weRyPB4QT/G/WayhYNW9XvSBDwjxeA40dmEuzieeJ5leyqq5Rjx3AXGUlvjfxfsI2MCXSVGIlDZhe3Dkt8g/AC5ZmdbPNqoPsfs4lBb92plzzHK46cI87xo38XIhgXJrAYeTBmQAe3vcB2SjK+aaz009uwe7phyvc8Huzc0uJnhBsKZIczYgLx33D4JnLfOUVxpKkbE+bNCvxFKm286MKW01mX0MsBPCT7NoenkWQY5ApngX5q5iJRviNoiGDhdmwL4JshkM1J9MigtWCvlM3xj4PhjNRU43U/u+I61Wbx+DZZUaDfExg8ZXB1KURm6bu/NGAn0mVevJgyK5V+js+t0+p4gTpZjUMUWKMTGWGtZMIomicmX5RoPDPh73rniViUcFW3GQJ2hmPeK5UiVjtKNiWxMVy5K+ooMlvVUsCOPz4XgYDbHTWplsW76Glwpsy/+g7FqSs/DTl7UUrTaYY4cVirWZsIGIWrCiiMVSU4fXgCfy/uF6bnFNm5kLS2Wan2c4vfhrGMGPaQMh/6KraUPfCRy6js9ribdzqnTGpDRce73Zs9KsBLSF/AC37vYtpDi/DeFvb6qeaTaPPXFN99/5zUy08EY3h8+eWPpAba2H874tug1+TLjGYHOhD29c/X28N+hm62r4eRTNotPockbd+f+QoVPBmbakX+eDzcFarT9nx7giDG/d2OFuy5b1+sCtAlerrzt1lDjzei1y326lbsN8L8CtrYY9NHsHd7w6SOveoPHaoN7+tHMczdcn0rqOjavpHb8ZTHvwft4tfTuP5VJpXBVK2ZFctZ0VzY5hYNUHLcBwDtpsmZw/oVhMGa9KquxOPP3kPK6N45pGx/PXOJDlNgcy3yShffErZPzsmwuWVMsa9IJtvvQFh7bKeE6+Aj3wcB0=""",
"clay.h" : r"""eJy9VMtu2zAQPEdfsbUuliDE7jVNAxiBjRgwgqJ1kPZEMNQqJiqTKkk17t+XpCQ/ZKlqe/BJ1JKzM7s7ZMgzkWIGhNyvZt/Iev5lTR4ICUIb5ALP4kHIBcvLFOFWmzTnL9ebuyD4KXkKLKe/CKFaozLj4IoLA0yKlBsuRRJc2bW2kQ1VEGc8x6Q6kluW1i4qJVUrlqJmihd1LgfUG1nmKaEvUpnow14D0WgIy5GKshj72Diuf6PqP44SqBayoD9KdOCQZ64LvtbF8uv66fOcfJqtH4JjDTZ5xnemVDg+LcbHiKBbl6sbQfSfMI32Jnys326HaNuYBcEkjgOIYeZbbDsBW8qU1PDGzQZwV+SccQO+fbBFrekr2vOT/TAtw7bUhhR2SGRsASoB19jodHZ+J4K7jzBNrAEWy9WcELdaLR/9arQoBfMCGM1zyKgdZ3oDIwgPORN4H50Ru5PDxLe9vPNdgcxgCtmJACO9hgEFFckw/bv+ui2/sn11xFyDkAaMKrGLt5nV/QbZ9/+YE3O4Cw1qGp0zX3hSXRIuMKhpNHCphPzL61RLOr1hVTCBx6fVqvsytGBV13thdfl7TOPoU0C/9YaqOZjuwHFsxF5hB8+0gQMV+UNtTLuepqCFVMw5yqa0j+TkjSrBxWu7CK+iwzR9VlmjfZWrm3E96n45aqZ/yfpcQSAtlfsYR4I7ZKWz2M3o2ID16/4bphd7Mw=="""
}

if __name__ == '__main__':
    main()
